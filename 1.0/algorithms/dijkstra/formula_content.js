var variable_content = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_dist.svg" /></td><td>從起點到各節點的暫定最短距離</td><td class="code">dist</td></tr><tr><td class="symbol"><img src="variable_nodeId.svg" /></td><td>節點編號</td><td class="code">nodeId</td></tr><tr><td class="symbol"><img src="variable_parent.svg" /></td><td>最短路徑樹中的父節點</td><td class="code">parent</td></tr><tr><td class="symbol"><img src="variable_weight.svg" /></td><td>節點間的距離</td><td class="code">weight</td></tr>';
var formula_content = '<tr><th class="scene_desc" colspan="3">決定起點</th></tr><tr><td class="symbol"><img src="formula_source.svg" /></td><td>將起點的距離初始化為 0。</td><td class="code">dist[s] &larr; 0</td></tr><tr><td class="symbol"><img src="formula_others.svg" /></td><td>將其餘節點的距離初始化為極大的值。</td><td class="code">dist[v] &larr; INF</td></tr><tr><th class="scene_desc" colspan="3">建立最短路徑樹</th></tr><tr><td class="symbol"><img src="formula_u.svg" /></td><td>指向從堆積中取出的最佳節點。</td><td class="code">u</td></tr><tr><td class="symbol"><img src="formula_target.svg" /></td><td>拜訪相鄰節點並更新距離。</td><td class="code">if dist[e.v] &gt; dist[u] + e.weight:<br>&nbsp;&nbsp;&nbsp;&nbsp;dist[e.v] &larr; dist[u] + e.weight<br>&nbsp;&nbsp;&nbsp;&nbsp;在 que 中插入 (dist[e.v], e.v)<br>&nbsp;&nbsp;&nbsp;&nbsp;parent[e.v] &larr; u</td></tr><tr><td class="symbol"><img src="formula_edges.svg" /></td><td>標示最短路徑樹暫定要使用的邊。</td><td class="code">(v, parent[v])</td></tr><tr><td class="symbol"><img src="formula_finished.svg" /></td><td>擴大最短路徑樹。</td><td class="code">已在 T 內的節點</td></tr><tr><th class="scene_desc" colspan="3">輸出最短路徑樹</th></tr><tr><td class="symbol"><img src="formula_all.svg" /></td><td>利用父節點的資訊建立最短路徑樹。</td><td class="code"></td></tr>';

window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; ";
document.getElementById('ptitle').innerHTML = "最大公因數";
document.getElementById('ptitle_en').innerHTML = "Greatest Common Divisor";
document.getElementById('input_comment').innerHTML = "2個整數a, b<ul><li>1 &le; a &le; $10^9$</li><li>1 &le; b &le; $10^9$</li></ul>";
document.getElementById('output_comment').innerHTML = "a 與 b 的最大公因數";
document.getElementById('motivation').innerHTML = "最大公因數是幾個整數的最大共同因數。在尋找最大公因數時，直接將這些整數的共同因數都列出來比較也是一種做法，但這種做法在遇到較大的數時，效率就會變差。";
document.getElementById('description').innerHTML = "請求出 2 個整數的最大公因數。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/gcd/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/gcd/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/euclidean_algorithm.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "輾轉相除法";
document.getElementById('atitle_en').innerHTML = "Euclidean Algorithm";
document.getElementById('abstract').innerHTML = "輾轉相除法（又稱歐幾里得演算法）是一種可快速求出最大公因數的演算法，其原理是 a 與 b（a > b）的最大公因數會等於 b 與「a 除以 b 的餘數」。本節的做法會使用 3 個變數，分別儲存 2 個整數 a 與 b，以及 a 除以 b 的餘數 r。";
document.getElementById('explanation').innerHTML = "求 a 與 b 的最大公因數，等於在找出一個最大的正方形剛好鋪滿 a×b 的矩形且不會剩下空間，這個正方形的邊長同時可以整除 a 和 b，因為我們要找出最大的正方形，所以其邊長就是 a 和 b 的最大公因數。一開始，我們看 b×b 的正方形是否能鋪滿 a×b（a > b）的矩形，若不能，則剩餘空間將會是 b × (a%b) 的矩形（其中 a％b 為 a 除以 b 的餘數）。可以鋪滿 b × (a%b) 的正方形，同樣也能鋪滿原本 a×b 的矩形。因此我們可藉此方式漸漸縮小矩形，直到矩形被正方形鋪滿為止。";
document.getElementById('note').innerHTML = "輾轉相除法的過程就是反覆地計算餘數 r，因此只要分析 r 會如何縮小，即可估算出時間複雜度。而 r 最多只需要計算 2 次，就會變成原本的一半。意即整個過程最多也只需要進行 2 log 2 (b) 次的計算。因此可知此演算法的時間複雜度為 O(log b)。<br/><br/>最大公因數通常寫成 GCD（Greatest Common Divisor），我們將計算 2 個整數的最大公因數的函式定義為gcd(a, b)。";
document.getElementById('application').innerHTML = "最大公因數在整數論中是非常基本的問題，但它在許多應用程式與計算中扮演著重要的角色。最常見的應用為分數的約分（例如將 39/52 的分子、分母都除以 gcd(39, 52）= 13，即可得到 3/4，這樣計算起來會更方便）。此外，最小公倍數 LCM（Least Common Multiple）只要利用 GCD 即可輕鬆求出：lcm(a, b) = (a &times; b)/gcd(a, b)。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A0D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">3 個單節點</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">資料</th></tr><tr><td class="symbol"><img src="variable_a.svg" /></td><td>第 1 個整數</td><td class="code">a</td></tr><tr><td class="symbol"><img src="variable_b.svg" /></td><td>第 2 個整數</td><td class="code">b</td></tr><tr><td class="symbol"><img src="variable_r.svg" /></td><td>a 除以 b 的餘數</td><td class="code">r</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">輸入</th></tr><tr><td class="symbol"><img src="formula_inx.svg" /></td><td>輸入 2 個整數。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">輾轉相除法</th></tr><tr><td class="symbol"><img src="formula_zw.svg" /></td><td>將 r 指定為 a 除以 b 的餘數。</td><td class="code">r &larr; a % b</td></tr><tr><td class="symbol"><img src="formula_xw.svg" /></td><td>複製變數的值。</td><td class="code">a &larr; b<br/>b &larr; r</td></tr><tr><th class="scene_desc" colspan="3">輸出</th></tr><tr><td class="symbol"><img src="formula_outx.svg" /></td><td>輸出最大公因數。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">計算餘數。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">複製變數的值。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">輸入</b><br/><img src="scene_0.svg" alt="輾轉相除法 | 輸入" title="輾轉相除法 | 輸入"/></p></div><div><p><b class="scene_desc">輾轉相除法</b><br/><img src="scene_1.svg" alt="輾轉相除法 | 輾轉相除法" title="輾轉相除法 | 輾轉相除法"/></p></div><div><p><b class="scene_desc">輸出</b><br/><img src="scene_2.svg" alt="輾轉相除法 | 輸出" title="輾轉相除法 | 輸出"/></p></div>';
document.getElementById('complexity').innerHTML = '';
document.getElementById('prerequisites').innerHTML = '';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
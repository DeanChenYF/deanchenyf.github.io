window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "整數序列的排序";
document.getElementById('ptitle_en').innerHTML = "Sorting Integers";
document.getElementById('input_comment').innerHTML = "整數序列<ul><li>$N &le; 100$</li><li> $a_i &le; 10^9$</li></ul>";
document.getElementById('output_comment').innerHTML = "排序完成的整數序列";
document.getElementById('motivation').innerHTML = "資訊處理的基礎就是以資料之間共通的鍵值（key）為基準，將資料排序。本節將介紹元素數較少的整數序列排序方式。";
document.getElementById('description').innerHTML = "請將整數序列 {a 0 , a 1 , ... , a N-1 } 按照升冪排列。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/sort_small/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/sort_small/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/selection_sort.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "選擇排序法";
document.getElementById('atitle_en').innerHTML = "Selection Sort";
document.getElementById('abstract').innerHTML = "選擇排序法和氣泡排序法一樣將陣列分為前方已排序、後方待排序的 2 個部分。排序時，從待排序部分搜尋出最小值，與待排序部分的最前端互換，使其成為已排序部分的最尾端（編註：其實就是反覆搜尋序列中的最小值，把它與最左邊的元素對調）。";
document.getElementById('explanation').innerHTML = "此排序法會從前方開始逐一獲得排序完成的元素。其做法是對未排序的部分使用minimum(A, i, N)，找出陣列 A 的區間 [i, N] 中最小值的元素位置 minj，再將此元素與未排序部分的最前端互換。如此一來，已排序部分會往後擴及該元素。";
document.getElementById('note').innerHTML = "為了將第 1 小的元素移動到最前端而使用的最小值搜尋，需要進行 N-1 次的比較；為了移動第 2 小的元素，則需要進行 N-2 次的比較，以此類推，像這樣的最小值搜尋，必須進行 N-1 次。因此整體的比較、互換次數應為 (N-1)+(N-2) +...+1 = N(N-1)/2 次，表示選擇排序法的時間複雜度為 O(N 2 )。";
document.getElementById('application').innerHTML = "選擇排序法是最單純的排序演算法之一，雖然因計算效率差而不實用，但其操作直覺，適合做為初學演算法的練習教材。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A1D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">一維陣列</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">資料</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>整數序列</td><td class="code">A</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">輸入</th></tr><tr><td class="symbol"><img src="formula_in.svg" /></td><td>輸入整數序列。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">排列</th></tr><tr><td class="symbol"><img src="formula_comp.svg" /></td><td>找出未排序部分的最小值。</td><td class="code">minj &larr; minimum(A, i, N)</td></tr><tr><td class="symbol"><img src="formula_cp.svg" /></td><td>指向最小值。</td><td class="code">minj</td></tr><tr><td class="symbol"><img src="formula_w.svg" /></td><td>將未排序部分的最前端與最小值互換。</td><td class="code">swap(A[i], A[minj])</td></tr><tr><td class="symbol"><img src="formula_sorted.svg" /></td><td>擴大已排序完成的範圍。</td><td class="code">區間[0, i)</td></tr><tr><th class="scene_desc" colspan="3">輸出</th></tr><tr><td class="symbol"><img src="formula_out.svg" /></td><td>輸出排序完成的整數序列。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">找出未排序部分中最小值的位置。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">將未排序部分的最前端與最小值互換。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">輸入</b><br/><img src="scene_0.svg" alt="選擇排序法 | 輸入" title="選擇排序法 | 輸入"/></p></div><div><p><b class="scene_desc">排列</b><br/><img src="scene_1.svg" alt="選擇排序法 | 排列" title="選擇排序法 | 排列"/></p></div><div><p><b class="scene_desc">輸出</b><br/><img src="scene_2.svg" alt="選擇排序法 | 輸出" title="選擇排序法 | 輸出"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/quad.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/minimum_of_integers_index.svg" width="60"/><img src="../../icons/algorithms/swap.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; ";
document.getElementById('ptitle').innerHTML = "区間の和";
document.getElementById('ptitle_en').innerHTML = "Range Sum";
document.getElementById('input_comment').innerHTML = "整数の列とQ個の区間<ul><li>列の要素数N &le; 100,000</li><li>Q &le; 100,000</li></ul>";
document.getElementById('output_comment').innerHTML = "指定された各区間の和";
document.getElementById('motivation').innerHTML = "整列済みの列に二分探索を行うように、目的の値をより効率よく計算するために、与えられたデータに前処理を加える考え方はとても重要です。整数列に対する区間の和は、前処理を行うだけで、高速に求めることができるようになります。";
document.getElementById('description').innerHTML = "整数の列と、それに対するQ個の区間が与えられます。各区間の和を求めてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/range_sum/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/range_sum/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/accumulation.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "累積和";
document.getElementById('atitle_en').innerHTML = "Accumulation";
document.getElementById('abstract').innerHTML = "Q個の質問に答える前に、整数の列に対する累積和を求めておきます。ここでは、入力用の配列以外に、累積和を計算するためのもう一つの配列を使います。";
document.getElementById('explanation').innerHTML = "累積和は、入力データを保持する配列変数Aの要素を上書きして直接求めることができますが、ここでは、配列変数ACにAの累積和を記録していきます。ここで、Aの0番目のノードは使わず、データはインデックス1から入力します。ACの最初の要素を0で初期化しておきます。<br/><br/>累積和の計算はインデックス1から開始します。i回目の計算でAC[i]にA[1]からA[i]までの和を記録していきます。これはiを1から開始し、AC[i] &larr; AC[i-1] + A[i]で求めることができます。<br/><br/>累積和を求めておけば、区間[l, r]に対する質問、つまりA[l]からA[r]の和は、AC[r] - A[l-1]で求めることができます。これは、A[1]からA[r]までの和XからA[1]からA[l-1]までの和Yを引いた値になります。";
document.getElementById('note').innerHTML = "累積和を用いずに、各質問に対して毎回区間の和を計算する素朴なアルゴリズムのオーダーはO(NQ)となってしまいます。<br/>累積和を用いた場合、各区間の和は一回の引き算で求まるため、オーダーはO(1)となります。よって累積和を計算し、それを利用してQ個の質問に答えるアルゴリズムのオーダーはQ(N + Q)となります。";
document.getElementById('application').innerHTML = "累積和のアイデアは、高等的整列アルゴリズムの１つである計数ソートに使われます。また、次の章につづく１次元と２次元（多次元）の重なり問題に応用することができます。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A1D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">２つの１次元配列と１つのシングルノード</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>入力の整数の列</td><td class="code">A</td></tr><tr><td class="symbol"><img src="variable_AC.svg" /></td><td>整数の列の累積和</td><td class="code">AC</td></tr><tr><td class="symbol"><img src="variable_sum.svg" /></td><td>区間の和</td><td class="code">sum</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入力</th></tr><tr><td class="symbol"><img src="formula_input.svg" /></td><td>整数の列を読み込みます。</td><td class="code"></td></tr><tr><td class="symbol"><img src="formula_init.svg" /></td><td>累積和の先頭を0に初期化します。</td><td class="code">AC[0] &larr; 0</td></tr><tr><th class="scene_desc" colspan="3">累積和の生成</th></tr><tr><td class="symbol"><img src="formula_i.svg" /></td><td>１つ前の要素を加算していきます。</td><td class="code">AC[i] &larr; AC[i-1] + A[i]</td></tr><tr><th class="scene_desc" colspan="3">質問に対する処理</th></tr><tr><td class="symbol"><img src="formula_write.svg" /></td><td>区間の始点と終点から、和を計算します。</td><td class="code">sum &larr; AC[r] - AC[l-1]</td></tr><tr><td class="symbol"><img src="formula_segment.svg" /></td><td>指定された区間。</td><td class="code">区間[l, r]</td></tr><tr><td class="symbol"><img src="formula_lp.svg" /></td><td>区間の始点</td><td class="code">l</td></tr><tr><td class="symbol"><img src="formula_rp.svg" /></td><td>区間の終点。</td><td class="code">r</td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">前の要素を加算していき、累積和を求めます。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">指定された区間に対する和を計算します。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入力</b><br/><img src="scene_0.svg" alt="累積和 | 入力" title="累積和 | 入力"/></p></div><div><p><b class="scene_desc">累積和の生成</b><br/><img src="scene_1.svg" alt="累積和 | 累積和の生成" title="累積和 | 累積和の生成"/></p></div><div><p><b class="scene_desc">質問に対する処理</b><br/><img src="scene_2.svg" alt="累積和 | 質問に対する処理" title="累積和 | 質問に対する処理"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/linear.svg" />';
document.getElementById('prerequisites').innerHTML = '';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; &#9733; ";
document.getElementById('ptitle').innerHTML = "点の凸包";
document.getElementById('ptitle_en').innerHTML = "Convex Hull";
document.getElementById('input_comment').innerHTML = "平面上の点群<ul><li>点の数N &le; 100,000</li></ul>";
document.getElementById('output_comment').innerHTML = "点を全て包む面積最小の凸多角形";
document.getElementById('motivation').innerHTML = "より大規模な点の集合に対して、凸包を求めてみましょう。";
document.getElementById('description').innerHTML = "与えられた点の集合の、凸包を求めてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/convex_hull/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/convex_hull/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/andrew.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "アンドリューのアルゴリズム";
document.getElementById('atitle_en').innerHTML = "Andrew's Algorithm";
document.getElementById('abstract').innerHTML = "アンドリューのアルゴリズムは、凸包の上部と下部をそれぞれ構築し、全体の凸包を完成させます。点の選択はスタックの特徴を活かし、凸包の辺上の点を、時計回りに決定していきます。";
document.getElementById('explanation').innerHTML = "ここでは、凸包の上部を求めるアルゴリズムを解説します。まず、全ての点を、x座標が小さい点、そのような点が複数ある場合はその中でy座標が最も小さい点、を基準として昇順に整列します。続いて、点の列の最初の２点を凸包に含め、これらをこの順番でスタックに積んでおきます。<br></br>アンドリューのアルゴリズムは、凸包上の点の候補をスタックに積んでいき、最終的にスタックの中に残っている点が凸包を形成します。ソートされた点を順番に、凸包の点の候補として調べていきます。現在みている点をheadとします。headを凸包に追加する前に、スタックの上から２番目の点top2、頂点の点top、headの３点の位置関係を調べ、top2 &rarr; topに対してheadが反時計回りの位置にある限り、スタックからtopを削除していきます。headが時計回りの位置にきたとき、つまり凸包を形成するとき、headを凸包に含めスタックに積みます。<br/><br/>凸包の下部についても同様の手順で求めることができます。下部については、点をx座標の降順でソートし、最も右の点からスキャンすることで、時計回りに凸包を求める、上と同様のアルゴリズムを適用することができます。";
document.getElementById('note').innerHTML = "アンドリューのアルゴリズムの凸包の点を選ぶ処理において、各点がスタックに挿入されるのは高々２回なので、オーダーはO(N)となります。ただし、最初に全ての点をソートする部分がネックとなるため、オーダーはソートのアルゴリズムに依存しO(N log N)となります。";
document.getElementById('application').innerHTML = "";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/P2D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_p2d.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">点集合</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">点の整列</th></tr><tr><td class="symbol"><img src="formula_all.svg" /></td><td>点をxの昇順にソートします。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">凸包の構築</th></tr><tr><td class="symbol"><img src="formula_select.svg" /></td><td>3点が反時計回りかどうかをチェックします。</td><td class="code"></td></tr><tr><td class="symbol"><img src="formula_head.svg" /></td><td>点の番号をスタックに追加します。</td><td class="code">st.push(head)</td></tr><tr><td class="symbol"><img src="formula_trace.svg" /></td><td>凸包の点を確定していきます。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">点の位置関係を調べます。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">点を凸包の候補から除外します。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step3.svg" /><p class="caption">点を凸包の候補に含めます。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">点の整列</b><br/><img src="scene_0.svg" alt="アンドリューのアルゴリズム | 点の整列" title="アンドリューのアルゴリズム | 点の整列"/></p></div><div><p><b class="scene_desc">凸包の構築</b><br/><img src="scene_1.svg" alt="アンドリューのアルゴリズム | 凸包の構築" title="アンドリューのアルゴリズム | 凸包の構築"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/linear_log.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/stack_simulation.svg" width="60"/><img src="../../icons/algorithms/quick_sort.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; &#9733; ";
document.getElementById('ptitle').innerHTML = "最短経路（負のエッジ）";
document.getElementById('ptitle_en').innerHTML = "Shortest Path on Graph with Negative Weight";
document.getElementById('input_comment').innerHTML = "重み付きグラフ<ul><li>ノードの数N &le; 1,000</li><li>エッジの数M &le; 2,000</li><li>-10,000 &lt; エッジの重み &le; 10,000</li></ul>";
document.getElementById('output_comment').innerHTML = "始点から終点への最短経路";
document.getElementById('motivation').innerHTML = "問題によっては重み付きグラフのエッジが負の値を持つことを想定しなければなりません。このようなグラフに対して、適用するアルゴリズムが正しく動くか検証することも重要になります。";
document.getElementById('description').innerHTML = "重み付きグラフと始点・終点が与えられたとき、始点から終点への最短距離を求めてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/shortest_distance_neg/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/shortest_distance_neg/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/bellman_ford.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "ベルマンフォードのアルゴリズム";
document.getElementById('atitle_en').innerHTML = "Bellman Ford's Algorithm";
document.getElementById('abstract').innerHTML = "ベルマンフォードのアルゴリズムは、エッジの走査を一定回数行って、暫定最短距離を更新していきます。";
document.getElementById('explanation').innerHTML = "ベルマンフォードのアルゴリズムは、ダイクストラのアルゴリズムと同様に、始点からの各ノードiまでの暫定最短距離dist[i]を更新していき、アルゴリズムが終了したときに最短距離が確定します。ダイクストラのアルゴリズムが、選択された最適なノードに隣接するノードの暫定距離を更新するのに対して、ベルマンフォードのアルゴリズムは、これを全てのエッジを走査する処理を繰り返すことで行います。<br/><br/>全てのエッジ(u, v)について、dist[v]とdist[u] + weight[u][v]を比較し、dist[v]を小さい方に更新していきます。この処理を、すべてのノードのdist[i]が確定するまで行いますが、N-1回行えば最適解が保障されます。<br><br>最短経路問題では、暫定距離が負になるような、いわゆる負のサイクルが発生してはいけません（無限に距離を減らすことができるため）。ベルマンフォードのアルゴリズムは、このような負のサイクルを検出することができます。これは、全てのエッジを走査する繰り返し処理において、N回目の繰り返しでdistの更新が発生したかどうかで検出することができます。<br><br>また、ダイクストラのアルゴリズムと同様に、暫定距離の更新時に親を記録しておけば、最短経路木を構築することができます。";
document.getElementById('note').innerHTML = "グラフに含まれるM個のエッジを合計N回操作するので、ベルマンフォードのアルゴリズムのオーダーはO(NM)となります。暫定距離の更新が止まったら処理が打ち切られるため、グラフの形状とエッジの重みの特性によっては、高速に動作します。";
document.getElementById('application').innerHTML = "ベルマンフォードのアルゴリズムは、ダイクストラのアルゴリズムと比べると計算効率は劣りますが、負の重みのエッジがあるグラフを扱うアプリケーションに活用することができます。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/DGR.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">重み付き有向グラフ</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_dist.svg" /></td><td>始点から各ノードへの最短距離</td><td class="code">dist</td></tr><tr><td class="symbol"><img src="variable_weight.svg" /></td><td>ノード間の距離</td><td class="code">weight</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">始点の初期化</th></tr><tr><td class="symbol"><img src="formula_source.svg" /></td><td>始点の暫定距離を0に初期化します。</td><td class="code">dist[s] &larr; 0</td></tr><tr><td class="symbol"><img src="formula_others.svg" /></td><td>その他のノードの暫定距離を大きな値に設定します。</td><td class="code">dist[v] &larr; INF</td></tr><tr><th class="scene_desc" colspan="3">距離の更新</th></tr><tr><td class="symbol"><img src="formula_v.svg" /></td><td>暫定距離を更新します。</td><td class="code">if dist[e.v] &gt; dist[u] + e.weight: <br>&nbsp;&nbsp;&nbsp;&nbsp;dist[e.v] &larr; dist[u] + e.weight</td></tr><tr><th class="scene_desc" colspan="3">最短距離を出力</th></tr><tr><td class="symbol"><img src="formula_all.svg" /></td><td>始点からの最短距離を出力します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">暫定距離を更新します。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">始点の初期化</b><br/><img src="scene_0.svg" alt="ベルマンフォードのアルゴリズム | 始点の初期化" title="ベルマンフォードのアルゴリズム | 始点の初期化"/></p></div><div><p><b class="scene_desc">距離の更新</b><br/><img src="scene_1.svg" alt="ベルマンフォードのアルゴリズム | 距離の更新" title="ベルマンフォードのアルゴリズム | 距離の更新"/></p></div><div><p><b class="scene_desc">最短距離を出力</b><br/><img src="scene_2.svg" alt="ベルマンフォードのアルゴリズム | 最短距離を出力" title="ベルマンフォードのアルゴリズム | 最短距離を出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/cube.svg" />';
document.getElementById('prerequisites').innerHTML = '';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
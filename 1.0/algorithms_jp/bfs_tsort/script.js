window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "トポロジカルソート";
document.getElementById('ptitle_en').innerHTML = "Topological Sort";
document.getElementById('input_comment').innerHTML = "有向グラフ<ul><li>ノードの数N &le; 100,000</li><li>エッジの数M &le; 100,000</li></ul>";
document.getElementById('output_comment').innerHTML = "各ノードの実行する順番";
document.getElementById('motivation').innerHTML = "依存関係のある複数のタスクを処理する場合は、前提タスクが全て終了してから当該タスクが実行されるように、タスクを処理する順番を決めなければなりません。";
document.getElementById('description').innerHTML = "タスクと依存関係を表す有向グラフから、タスクを処理する順番を求めてください。あるタスクを処理するとき、それが依存する全てのタスクが終了している必要があります。有向グラフのエッジ(u, v)は、vがuに依存していることを示します。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/topological_sort/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/topological_sort/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/bfs_tsort.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "Kahnのアルゴリズム";
document.getElementById('atitle_en').innerHTML = "Kahn's Algorithm";
document.getElementById('abstract').innerHTML = "有向グラフのノードを、どのノードもそれから出ているエッジの先のノードよりも前に位置するように並べる操作を、トポロジカルソートと言います。幅優先探索は、入次数が0のノードをキューで管理することで、有向グラフに対してトポロジカルソートを行うことができます。このアルゴリズムはKahnのアルゴリズムとして知られています。";
document.getElementById('explanation').innerHTML = "与えられたグラフにおいて、あるノードの入次数が0であれば、そのタスクを始める前提タスクがないことを示します。従って、その時点で入次数が0のノード（タスク）を実行することができます。ノードu（タスク）の実行が終了すれば、それに直接依存するノードvについて、それぞれの必要とするタスクが１つ減るので、入次数を１つ減らすことができます。<br><br>各ノードの入次数を保持しておきながら、幅優先探索によって、タスク実行のシミュレーションを行います。入次数が0のノード、つまり依存するタスクがないノードをキューに追加していきます。キューから取り出した実行可能なタスクを実行し、それに直接依存するノードの入次数を減らしていきます。この過程で、入次数が0になったノードをキューに追加していき、キューが空になるまでシミュレーションを行います。";
document.getElementById('note').innerHTML = "隣接リストを用いた幅優先探索を行えばトポロジカルソートのオーダーはO(N + M)となります。";
document.getElementById('application').innerHTML = "トポロジカルソートは、依存関係を持った処理を適切な順番に並べることができるため、ジョブのスケジューリングなど広く応用されています。例えば、依存関係がある複数のプログラムのコンパイル順序を決定するアルゴリズムとして応用することができます。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/GR.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_g.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">有向グラフ</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_deg.svg" /></td><td>ノードの入次数</td><td class="code">deg</td></tr><tr><td class="symbol"><img src="variable_order.svg" /></td><td>ソート済みの順番</td><td class="code">order</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入次数の初期化</th></tr><tr><td class="symbol"><img src="formula_all.svg" /></td><td>入次数を求めます。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">ソート</th></tr><tr><td class="symbol"><img src="formula_tail.svg" /></td><td>入次数が0のノードをキューに挿入します。</td><td class="code">que.enqueue(v)</td></tr><tr><td class="symbol"><img src="formula_ui.svg" /></td><td>入次数が0のノードをキューから取り出し、順番を確定します。</td><td class="code">u &larr; que.dequeue()<br/>order[u] &larr; t++</td></tr><tr><td class="symbol"><img src="formula_vi.svg" /></td><td>隣接するノードの入次数を１減らします。</td><td class="code">deg[v]--</td></tr><tr><td class="symbol"><img src="formula_finished.svg" /></td><td>順番が確定しているノードのグループを拡張していきます。</td><td class="code">orderが決定しているノード</td></tr><tr><th class="scene_desc" colspan="3">順番の出力</th></tr><tr><td class="symbol"><img src="formula_all_out.svg" /></td><td>順番を出力します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">キューから入次数0のノードを取り出します。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">隣接するノードの入次数を減らし、0になったらキューに挿入します。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入次数の初期化</b><br/><img src="scene_0.svg" alt="Kahnのアルゴリズム | 入次数の初期化" title="Kahnのアルゴリズム | 入次数の初期化"/></p></div><div><p><b class="scene_desc">ソート</b><br/><img src="scene_1.svg" alt="Kahnのアルゴリズム | ソート" title="Kahnのアルゴリズム | ソート"/></p></div><div><p><b class="scene_desc">順番の出力</b><br/><img src="scene_2.svg" alt="Kahnのアルゴリズム | 順番の出力" title="Kahnのアルゴリズム | 順番の出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/linear.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/bfs_queue.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "整数列の整列";
document.getElementById('ptitle_en').innerHTML = "Sorting Integers";
document.getElementById('input_comment').innerHTML = "整数の列<ul><li>$N &le; 100$</li><li> $a_i &le; 10^9$</li></ul>";
document.getElementById('output_comment').innerHTML = "整列された整数の列";
document.getElementById('motivation').innerHTML = "データをそれらがもつある共通のキーを基準に整列することは情報処理の基本です。ここでは、要素数が比較的少ない、整数の列を整列することを考えます。";
document.getElementById('description').innerHTML = "整数の列{a_0, a_1, ..., a_N}を小さい順に並べ替えてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/sort_small/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/sort_small/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/bubble_sort.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "バブルソート";
document.getElementById('atitle_en').innerHTML = "Bubble Sort";
document.getElementById('abstract').innerHTML = "バブルソートは、配列を前方のソート済み部分と後方の未ソート部分に分け、隣り合う要素を比較し逆順の組をスワップする処理を繰り返し、ソート済みの要素を決定していきます。";
document.getElementById('explanation').innerHTML = "前方から１つずつソート済みの要素を決定していきます。ソート済みの要素をひとつずつ決定するために、最後尾から未ソートの部分の先頭まで、隣り合う要素同士を比較していき、必要に応じてスワップしていきます。この操作により、未ソートの部分の最小値が未ソートの部分の先頭（つまりソート済みの末尾）に移動します。この処理を、未ソートの部分がなくなるまで繰り返します。";
document.getElementById('note').innerHTML = "泡が水面に上がっていくようにデータが動いていくため、「バブル」ソートと呼ばれます。１番小さい要素を先頭に移動するためにスワップ処理を$N-1$回、２番目に小さい要素をソート済み部分の末尾へ移動するためにスワップ処理を$N-2$回、...、という具合にスワップ処理によって最小値をソート済み部分の末尾へ移動する処理を$N$回行います。よって全体の比較・スワップ回数の総数は($N-1$) + ($N-2$) + ,.., + 1 = $N(N-1)/2$回になり、オーダーはO($N^2$)となります。";
document.getElementById('application').innerHTML = "バブルソートは、最も素朴なソートアルゴリズムのひとつです。計算効率が悪いため、実用的ではありませんが、隣接する要素のスワップ処理を繰り返してデータを移動する操作は、いくつかのアルゴリズムで応用されます。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A1D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_s.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">１次元配列</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>整数の列</td><td class="code">A</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入力</th></tr><tr><td class="symbol"><img src="formula_in.svg" /></td><td>整数の列を入力します。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">整列</th></tr><tr><td class="symbol"><img src="formula_comp.svg" /></td><td>隣り合う要素の大小関係を調べます。</td><td class="code">if A[j-1] &gt; A[j]:</td></tr><tr><td class="symbol"><img src="formula_swap.svg" /></td><td>２つの要素をスワップします。</td><td class="code">swap(A[j-1], A[j])</td></tr><tr><td class="symbol"><img src="formula_sorted.svg" /></td><td>ソート済みの部分を拡張していきます。</td><td class="code">区間[0, i)</td></tr><tr><td class="symbol"><img src="formula_unsorted.svg" /></td><td>後方から隣り合う要素を比較した部分を拡張していきます。</td><td class="code">区間[j-1, N)</td></tr><tr><th class="scene_desc" colspan="3">出力</th></tr><tr><td class="symbol"><img src="formula_out.svg" /></td><td>整列された整数の列を出力します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">隣り合う要素を比較します。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">順番が逆ならばスワップします。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入力</b><br/><img src="scene_0.svg" alt="バブルソート | 入力" title="バブルソート | 入力"/></p></div><div><p><b class="scene_desc">整列</b><br/><img src="scene_1.svg" alt="バブルソート | 整列" title="バブルソート | 整列"/></p></div><div><p><b class="scene_desc">出力</b><br/><img src="scene_2.svg" alt="バブルソート | 出力" title="バブルソート | 出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/quad.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/swap.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
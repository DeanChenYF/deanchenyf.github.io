window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; ";
document.getElementById('ptitle').innerHTML = "整数列の整列";
document.getElementById('ptitle_en').innerHTML = "Sorting Integers";
document.getElementById('input_comment').innerHTML = "整数の列 $a_0, a_1, ..., a_{N-1}$<ul><li>$N &le; 100,000$</li><li>$0 &le; a_i &le; 100,000$</li></ul>)";
document.getElementById('output_comment').innerHTML = "整列された整数の列";
document.getElementById('motivation').innerHTML = "アルゴリズムを考えるうえで、問題の制約を考慮することは重要です。例えば、扱うデータの「値」の範囲が比較的小さければ、その性質を利用することができます。";
document.getElementById('description').innerHTML = "整数の列を小さい順に整列してください。ただし、各整数の上限は比較的小さいものとします。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/sort_low/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/sort_low/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/counting_sort.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "計数ソート";
document.getElementById('atitle_en').innerHTML = "Counting Sort";
document.getElementById('abstract').innerHTML = "計数ソートは、入力配列に含まれる各整数の数を数え上げ、その累積和を用いて高速にデータを並べ替えます。";
document.getElementById('explanation').innerHTML = "アルゴリズムは３つのフェーズから成ります。最初のフェーズで、入力配列Aを走査し、それに含まれる各整数の数をカウント用の配列Cで数え上げます。この時点で、カウント用配列Cの要素iには、整数iの出現数が保存されます。<br/>次のフェーズで、カウント用配列Cの先頭（つまり整数0から）から累積和をとっていきます。この累積和により、「現段階でi以下の整数が入力配列の中に何個含まれるか」つまり「出力配列の何番目に配置すべきか」をO(1)で求めることができるようになります。<br/>最後のフェーズで、この累積和を使い入力配列Aの後方から順番に要素を出力配列Bに移動していきます。移動する要素の該当するカウンタは１減らします。";
document.getElementById('note').innerHTML = "計数ソートは、各要素の最大値が比較的小さく、全ての要素が非負の値の場合に適用することができます。要素の数え上げと出力配列に移動する処理のオーダーはO(N)です。また、要素の最大値をKとすると、累積和を求める処理のオーダーはO(K)になります。よって、計数ソートのオーダーはO(N + K)となります。計数ソートは高速であり、安定なソートです。一方、計数ソートでは、入力の配列以外に、サイズNの出力用の配列と、サイズKのカウンタ・累積和用の配列が必要になります。";
document.getElementById('application').innerHTML = "要素の最大値が比較的小さい大規模なデータに対して、ソートの高速化が期待できます。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A1D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">３つの１次元配列</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>入力の整数の列</td><td class="code">A</td></tr><tr><td class="symbol"><img src="variable_C.svg" /></td><td>各整数の出現数の累積和</td><td class="code">C</td></tr><tr><td class="symbol"><img src="variable_B.svg" /></td><td>整列された整数の列</td><td class="code">B</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入力</th></tr><tr><td class="symbol"><img src="formula_in.svg" /></td><td>整数の列を入力します。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">カウント</th></tr><tr><td class="symbol"><img src="formula_inc.svg" /></td><td>整数のカウンタを１増やします。</td><td class="code">C[A[i]]++</td></tr><tr><th class="scene_desc" colspan="3">カウントの累積和</th></tr><tr><td class="symbol"><img src="formula_acc.svg" /></td><td>累積和を計算します。</td><td class="code">C[i] &larr; C[i] + C[i-1]</td></tr><tr><th class="scene_desc" colspan="3">出力配列への移動</th></tr><tr><td class="symbol"><img src="formula_dec.svg" /></td><td>使用する整数のカウンタをひとつ減らします。</td><td class="code">C[A[i]]--</td></tr><tr><td class="symbol"><img src="formula_cp.svg" /></td><td>カウンタの値の位置に、入力の要素をコピーします。</td><td class="code">B[C[A[i]]] &larr; A[i]</td></tr><tr><th class="scene_desc" colspan="3">出力</th></tr><tr><td class="symbol"><img src="formula_out.svg" /></td><td>整列された整数の列を出力します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">入力に現れる数をそれぞれカウントします。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">カウントの累積和をとります。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step3.svg" /><p class="caption">累積和を用いて、入力の要素を出力先に配置します。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入力</b><br/><img src="scene_0.svg" alt="計数ソート | 入力" title="計数ソート | 入力"/></p></div><div><p><b class="scene_desc">カウント</b><br/><img src="scene_1.svg" alt="計数ソート | カウント" title="計数ソート | カウント"/></p></div><div><p><b class="scene_desc">カウントの累積和</b><br/><img src="scene_2.svg" alt="計数ソート | カウントの累積和" title="計数ソート | カウントの累積和"/></p></div><div><p><b class="scene_desc">出力配列への移動</b><br/><img src="scene_3.svg" alt="計数ソート | 出力配列への移動" title="計数ソート | 出力配列への移動"/></p></div><div><p><b class="scene_desc">出力</b><br/><img src="scene_4.svg" alt="計数ソート | 出力" title="計数ソート | 出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/linear.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/accumulation.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
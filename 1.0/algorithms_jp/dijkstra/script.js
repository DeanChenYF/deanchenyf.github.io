window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; &#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "最短経路";
document.getElementById('ptitle_en').innerHTML = "Shortest Path";
document.getElementById('input_comment').innerHTML = "重み付きグラフ<ul><li>ノードの数N &le; 100,000</li><li>エッジの数M &le; 100,000</li><li>0 &lt; エッジの重み &le; 10,000</li></ul>";
document.getElementById('output_comment').innerHTML = "始点から終点への最短経路";
document.getElementById('motivation').innerHTML = "より大きなグラフに対して、最短経路を求めてみましょう。";
document.getElementById('description').innerHTML = "重み付きグラフと始点・終点が与えられたとき、始点から終点への最短経路を求めてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/shortest_distance/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/shortest_distance/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/dijkstra.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "ダイクストラのアルゴリズム（優先度付きキュー）";
document.getElementById('atitle_en').innerHTML = "Dijkstra's Algorithm (with Priority Queue)";
document.getElementById('abstract').innerHTML = "ダイクストラのアルゴリズムは、最小ヒープに基づく優先度付きキューを応用することで、高速に最短経路木を構築することができます。";
document.getElementById('explanation').innerHTML = "距離が暫定的なノードから、最短距離を決定し最短経路木に含める処理では、最短経路木に含まれないノードの中から、距離が最小のノードを探索しなければなりません。この処理を優先度付きキューを用いて行うことでアルゴリズムの効率化を図ります。優先度付きキューは(暫定距離, ノード番号)の組を要素とし、暫定距離に関して最小の要素から取り出されるよう最小ヒープで管理します。<br/><br/>まず、始点の暫定距離を0に初期化し、(0, 始点のノード番号)を優先度付きキューqueに入れます。queが空になるまで、次の処理を繰り返します：queから(暫定距離cost, ノード番号u)を取り出し、uを最短経路木に含め、uに隣接するノードvの暫定距離を更新します。このとき、(vの暫定距離, v)をqueに追加します。";
document.getElementById('note').innerHTML = "ヒープ（優先度付きキュー）を用いたダイクストラのアルゴリズムでは、最適な要素をヒープから取り出すためにO(N log N)、暫定距離を更新してヒープに要素を追加するためにO(M log N)の計算が必要になるため、全体のオーダーはO((N+M) log N)となります。<br/><br/>ダイクストラのアルゴリズムは、効率的ですが、負の重みのエッジを持つグラフに対しては正しく動作しないため注意が必要です。";
document.getElementById('application').innerHTML = "ヒープを用いたダイクストラのアルゴルリズムは効率が良く、実用的な大きなグラフに対しても適用することができます。ダイクストラのアルゴリズムは、地図を用いた情報システムにおける経路検索に代表されるように、様々なアプリケーションに現れます。また、最短経路問題を解決するアルゴリズムは、ネットワークなど物理的な分野のみではなく、スケジューリング、ソーシャルネットワーク、経路計画、為替、ゲームなど、実社会のアプリケーションに幅広く応用されています。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/GR.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_g.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">重み付き無向グラフ</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_dist.svg" /></td><td>始点から各ノードへの暫定最短距離</td><td class="code">dist</td></tr><tr><td class="symbol"><img src="variable_nodeId.svg" /></td><td>ノード番号</td><td class="code">nodeId</td></tr><tr><td class="symbol"><img src="variable_parent.svg" /></td><td>最短経路木における親</td><td class="code">parent</td></tr><tr><td class="symbol"><img src="variable_weight.svg" /></td><td>ノード間の距離</td><td class="code">weight</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">始点を決定</th></tr><tr><td class="symbol"><img src="formula_source.svg" /></td><td>始点の距離を0に初期化します。</td><td class="code">dist[s] &larr; 0</td></tr><tr><td class="symbol"><img src="formula_others.svg" /></td><td>その他のノードの距離を大きな値に設定します。</td><td class="code">dist[v] &larr; INF</td></tr><tr><th class="scene_desc" colspan="3">最短経路木の構築</th></tr><tr><td class="symbol"><img src="formula_u.svg" /></td><td>ヒープから取り出された最適なノードを指します。</td><td class="code">u</td></tr><tr><td class="symbol"><img src="formula_target.svg" /></td><td>隣接するノードを訪問して距離を更新します。</td><td class="code">if dist[e.v] &gt; dist[u] + e.weight:<br>&nbsp;&nbsp;&nbsp;&nbsp;dist[e.v] &larr; dist[u] + e.weight<br>&nbsp;&nbsp;&nbsp;&nbsp;queに(dist[e.v], e.v)を挿入する<br>&nbsp;&nbsp;&nbsp;&nbsp;parent[e.v] &larr; u</td></tr><tr><td class="symbol"><img src="formula_edges.svg" /></td><td>最短経路木の暫定エッジを表します。</td><td class="code">(v, parent[v])</td></tr><tr><td class="symbol"><img src="formula_finished.svg" /></td><td>最短経路木を拡張していきます。</td><td class="code">Tに含まれるノード</td></tr><tr><th class="scene_desc" colspan="3">最短経路木を出力</th></tr><tr><td class="symbol"><img src="formula_all.svg" /></td><td>親の情報から最短経路木を構築します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">優先度付きキューから最適なノードを取得します。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">隣接するノードの距離を更新します。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">始点を決定</b><br/><img src="scene_0.svg" alt="ダイクストラのアルゴリズム（優先度付きキュー） | 始点を決定" title="ダイクストラのアルゴリズム（優先度付きキュー） | 始点を決定"/></p></div><div><p><b class="scene_desc">最短経路木の構築</b><br/><img src="scene_1.svg" alt="ダイクストラのアルゴリズム（優先度付きキュー） | 最短経路木の構築" title="ダイクストラのアルゴリズム（優先度付きキュー） | 最短経路木の構築"/></p></div><div><p><b class="scene_desc">最短経路木を出力</b><br/><img src="scene_2.svg" alt="ダイクストラのアルゴリズム（優先度付きキュー） | 最短経路木を出力" title="ダイクストラのアルゴリズム（優先度付きキュー） | 最短経路木を出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/linear_log.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/priority_queue_simulation.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
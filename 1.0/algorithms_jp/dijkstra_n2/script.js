window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "最短経路";
document.getElementById('ptitle_en').innerHTML = "Shortest Path";
document.getElementById('input_comment').innerHTML = "重み付きグラフ<ul><li>ノードの数N &le; 1,000</li><li>エッジの数M &le; 10,000</li><li>0 &le; エッジの重み &le; 10,000</li></ul>";
document.getElementById('output_comment').innerHTML = "始点から終点への最短経路";
document.getElementById('motivation').innerHTML = "指定された２点間の最短距離や経路は、日常生活の中でも最も興味深い問題のひとつです。ここでは、エッジの重みが非負の値に限定されたグラフに対する最短経路を考えます。";
document.getElementById('description').innerHTML = "重み付きグラフと始点・終点が与えられたとき、始点から終点への最短経路を求めてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/shortest_distance_small/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/shortest_distance_small/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/dijkstra_n2.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "ダイクストラのアルゴリズム";
document.getElementById('atitle_en').innerHTML = "Dijkstra's Algorithm";
document.getElementById('abstract').innerHTML = "ダイクストラのアルゴリズムは、最短経路木と呼ばれる始点を根とした全域木を生成します。最短経路木によって、始点から他の各ノードへの最短経路と最短距離が求まります。ダイクストラのアルゴリズムは、空の最短経路木Tから開始し、ノードを１つずつTに追加していきます。";
document.getElementById('explanation').innerHTML = "ダイクストラのアルゴリズムでは、最短経路木Tを拡張していきます。最短経路木とは、根を始点としたとき、根から各ノードへの（ただ一通りの）パスが、グラフ上の最短経路になっているような木です。各計算ステップでは、始点から各ノードまでの、Tに含まれるノードのみを経由した、最短距離が確定しています。Tに含まれない各ノードiについて、始点からの暫定的な最短距離をdist[i]に記録していきます。アルゴリズムは各ステップで、Tに含まれないノードから、暫定距離distが最も小さいノードuを選びTに含めます。このとき、ノードuに隣接しTに含まれないノードの暫定距離をより小さくできれば更新します。このとき、最短経路木におけるノードvの親parent[v]をuに更新します。ダイクストラのアルゴリズムは、全てのノードが最短経路木に含まれた時点で終了します。終了時点でdistが確定し、dist[i]には始点からノードiまでの最短距離が求まっています。最短経路木、つまり始点から他の各ノードまでの最短経路は、parentを用いて構築することができます。";
document.getElementById('note').innerHTML = "ダイクストラのアルゴリズムは、暫定距離が最小のノードを探す処理を線形探索で行う場合は、オーダーがO($N^2$)となります。これは、隣接行列、隣接リストで実装しても同じです。一方、この処理にヒープ（優先度付きキュー）を応用すれば高速なアルゴリズムを実装することができます。";
document.getElementById('application').innerHTML = "O($N^2$)の実装は効率が悪く、大きなグラフに対しては実用的ではありません。次のトピックではヒープを応用した実用的なダイクストラのアルゴリズムを解説します。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/GR.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">重み付き無向グラフ</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_dist.svg" /></td><td>始点から各ノードへの暫定最短距離</td><td class="code">dist</td></tr><tr><td class="symbol"><img src="variable_parent.svg" /></td><td>最短経路木における親</td><td class="code">parent</td></tr><tr><td class="symbol"><img src="variable_weight.svg" /></td><td>ノード間の距離</td><td class="code">weight</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">始点の決定と初期化</th></tr><tr><td class="symbol"><img src="formula_source.svg" /></td><td>始点の距離を0に初期化します。</td><td class="code">dist[s] &larr; 0</td></tr><tr><td class="symbol"><img src="formula_others.svg" /></td><td>その他のノードの暫定距離を大きな値で初期化します。</td><td class="code">dist[v] &larr; INF</td></tr><tr><th class="scene_desc" colspan="3">最短経路木の構築</th></tr><tr><td class="symbol"><img src="formula_select.svg" /></td><td>暫定距離が最小のノードを探します。</td><td class="code"># find minimum</td></tr><tr><td class="symbol"><img src="formula_u.svg" /></td><td>暫定距離が最も小さいノードを指します。</td><td class="code">u</td></tr><tr><td class="symbol"><img src="formula_v.svg" /></td><td>ノードの暫定距離と親を更新します。</td><td class="code">if dist[v] &gt; dist[u] + weight[u][v]:<br>&nbsp;&nbsp;&nbsp;&nbsp;dist[v] &larr; dist[u] + weight[u][v]<br>&nbsp;&nbsp;&nbsp;&nbsp;parent[v] &larr; u</td></tr><tr><td class="symbol"><img src="formula_edges.svg" /></td><td>最短経路木の暫定エッジを表します。</td><td class="code">(v, parent[v])</td></tr><tr><td class="symbol"><img src="formula_finished.svg" /></td><td>最短経路木を拡張していきます。</td><td class="code">Tにuを含める</td></tr><tr><th class="scene_desc" colspan="3">最短経路木を出力</th></tr><tr><td class="symbol"><img src="formula_all.svg" /></td><td>親の情報から最短経路木を構築します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">最小のdistをもつノードを探します。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">選んだノードをTに追加し、隣接するノードの暫定距離を更新します。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">始点の決定と初期化</b><br/><img src="scene_0.svg" alt="ダイクストラのアルゴリズム | 始点の決定と初期化" title="ダイクストラのアルゴリズム | 始点の決定と初期化"/></p></div><div><p><b class="scene_desc">最短経路木の構築</b><br/><img src="scene_1.svg" alt="ダイクストラのアルゴリズム | 最短経路木の構築" title="ダイクストラのアルゴリズム | 最短経路木の構築"/></p></div><div><p><b class="scene_desc">最短経路木を出力</b><br/><img src="scene_2.svg" alt="ダイクストラのアルゴリズム | 最短経路木を出力" title="ダイクストラのアルゴリズム | 最短経路木を出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/quad.svg" />';
document.getElementById('prerequisites').innerHTML = '';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
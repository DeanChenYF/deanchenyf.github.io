window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; ";
document.getElementById('ptitle').innerHTML = "最大公約数";
document.getElementById('ptitle_en').innerHTML = "Greatest Common Divisor";
document.getElementById('input_comment').innerHTML = "２つの整数a, b<ul><li>1 &le; a &le; $10^9$</li><li>1 &le; b &le; $10^9$</li></ul>";
document.getElementById('output_comment').innerHTML = "aとbの最大公約数";
document.getElementById('motivation').innerHTML = "最大公約数は、いくつかの整数の共通の約数の中で最大のものを言います。最大公約数は、対象となる整数の共通の約数を並べていけば求めることができますが、大きな数に対しては効率が悪くなります。";
document.getElementById('description').innerHTML = "２つの整数の最大公約数を求めてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/gcd/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/gcd/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/euclidean_algorithm.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "ユークリッドの互除法";
document.getElementById('atitle_en').innerHTML = "Euclidean Algorithm";
document.getElementById('abstract').innerHTML = "ユークリッドの互除法は、aとb (a > b)の最大公約数がbと「aをbで割った余り」の最大公約数と等しい、という性質を使い、高速に最大公約数を求めるアルゴリズムです。２つの整数aとb、それらの余りrをそれぞれ保持する、３つの変数を使います。";
document.getElementById('explanation').innerHTML = "aとbの最大公約数を求めるということは、a &times; b の長方形を隙間なく・重なりがなく敷き詰めることができる正方形の中で、１辺の長さが最大のものを見つけることです。a &times; b (a &gt; b) の長方形をb &times; b の正方形で敷き詰められない場合は、b &times; (a%b) (ここでa%bはaをbで割った余り)の長方形が残ります。ここで、このb &times; (a%b) を敷き詰められる正方形は、もとのa &times; b の長方形も敷き詰めることができます。よって、正方形で敷きめられるまで、同様の方法で長方形をどんどん小さくしていきます。";
document.getElementById('note').innerHTML = "ユークリッドの互除法では余りrを求める処理を繰り返しますが、このrがどのように減っていくかを分析して計算量を見積もることができます。rは多くとも２回のステップで半分になります。つまり高々2 log_2(b) 回の計算が行われます。よってこのアルゴリズムのオーダーはO(log b)となります。<br/><br/>最大公約数はGCD (Greatest Common Divisor)と呼ばれ、２つの整数の最大公約数を求める関数gcd(a, b)として定義されます。";
document.getElementById('application').innerHTML = "最大公約数は、整数論の中でも基礎的な問題ですが多くのアプリケーションや計算で重要な役割を果たします。最も一般的な応用は、分数の約分です（例えば、39/52はこれらのgcd(39, 52) = 13 で両方を割ると3/4となり、より計算し易くなります）。また、最小公倍数LCM (Least Common Multiple)はGCDを使って、次のように簡単に求めることができます。lcm(a, b) = (a &times; b)/gcd(a, b)。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A0D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">３つのシングルノード</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_a.svg" /></td><td>1つ目の整数</td><td class="code">a</td></tr><tr><td class="symbol"><img src="variable_b.svg" /></td><td>2つ目の整数</td><td class="code">b</td></tr><tr><td class="symbol"><img src="variable_r.svg" /></td><td>aをbで割った余り</td><td class="code">r</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入力</th></tr><tr><td class="symbol"><img src="formula_inx.svg" /></td><td>２つの整数を入力します。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">ユークリッドの互除法</th></tr><tr><td class="symbol"><img src="formula_zw.svg" /></td><td>aをbで割った値を代入します。</td><td class="code">r &larr; a % b</td></tr><tr><td class="symbol"><img src="formula_xw.svg" /></td><td>値をコピーします。</td><td class="code">a &larr; b<br/>b &larr; r</td></tr><tr><th class="scene_desc" colspan="3">出力</th></tr><tr><td class="symbol"><img src="formula_outx.svg" /></td><td>最大公約数を出力します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">余りを求める</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">値のシフト</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入力</b><br/><img src="scene_0.svg" alt="ユークリッドの互除法 | 入力" title="ユークリッドの互除法 | 入力"/></p></div><div><p><b class="scene_desc">ユークリッドの互除法</b><br/><img src="scene_1.svg" alt="ユークリッドの互除法 | ユークリッドの互除法" title="ユークリッドの互除法 | ユークリッドの互除法"/></p></div><div><p><b class="scene_desc">出力</b><br/><img src="scene_2.svg" alt="ユークリッドの互除法 | 出力" title="ユークリッドの互除法 | 出力"/></p></div>';
document.getElementById('complexity').innerHTML = '';
document.getElementById('prerequisites').innerHTML = '';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
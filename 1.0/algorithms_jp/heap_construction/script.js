window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; ";
document.getElementById('ptitle').innerHTML = "ヒープの構築";
document.getElementById('ptitle_en').innerHTML = "Building Heap";
document.getElementById('input_comment').innerHTML = "整数の列<ul><li>要素の数N &le; 100,000 </li></ul>";
document.getElementById('output_comment').innerHTML = "最大ヒープ";
document.getElementById('motivation').innerHTML = "与えられたデータの列や処理途中の列をヒープに変換することで、整列のアルゴリズムや優先度が重要なデータ構造のベースを作ることができます。";
document.getElementById('description').innerHTML = "適当な整数の列から最大ヒープを構築してください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/heap_construction/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/heap_construction/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/heap_construction.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "ビルドヒープ";
document.getElementById('atitle_en').innerHTML = "Build Heap";
document.getElementById('abstract').innerHTML = "ビルドヒープは、ボトムアップの順（下から上の方向）に、ダウンヒープを実行することで、ランダムな整数の列から最大ヒープを構築します。このアルゴリズムは、葉以外の全てのノードについて、ノード番号の降順（根に向かう順）に起点を選ぶことで、ボトムアップにダウンヒープを行います。";
document.getElementById('explanation').innerHTML = "最大ヒープを構築するには、その条件から、より深いノードからダウンヒープを行う必要があります。おおよそ完全二分木のノード番号を逆順に走査すれば深い順にノードを起点とすることができます。大きさNのおおよそ完全二分木で子を持つノードの最大の番号は(N/2)-1となるので、そこから根の0までを順番に起点とし、 ダウンヒープを行います。";
document.getElementById('note').innerHTML = "ここでは、ダウンヒープの操作をスワップではなく挿入(insertion)をベースに実装しています。<br/><br/>ダウンヒープ1回のオーダーはO(木の高さ)です。ビルドヒープでは以下のようにダウンヒープが行われます:<br/><br>高さ1のN/2個の部分木に対してダウンヒープ<br/>高さ2のN/4個の部分木に対してダウンヒープ<br/>...<br/>高さlog Nの1個の部分木（木全体）に対してダウンヒープ<br/><br>木の高さをhとし、これらを足し合わせると{$1(N/2) + 2(N/4) + ... + h(N/2^h)$}$ = N ${$(1/2) + (2/4) + ...  (h/2^h)$} となります。{&nbsp;}の中は1に近似できるためビルドヒープのオーダーはO(N)となります。";
document.getElementById('application').innerHTML = "ヒープの構築はアップヒープを繰り返すことでも達成できますが、その場合のオーダーはO(N log N)となってしまい、ダウンヒープによるビルドヒープの方が優れていると言えます。ダウンヒープによるヒープの構築は、ヒープソートの前処理として応用されます。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/ACBT.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_t.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">おおよそ完全二分木</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>最大ヒープの要素</td><td class="code">A</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入力・初期化</th></tr><tr><td class="symbol"><img src="formula_input.svg" /></td><td>整数の列を読み込みます（ヒープである必要なありません）。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">最大ヒープの構築</th></tr><tr><td class="symbol"><img src="formula_downRotation.svg" /></td><td>部分木に対してダウンヒープを行います。</td><td class="code">downHeap(A, i)</td></tr><tr><th class="scene_desc" colspan="3">出力</th></tr><tr><td class="symbol"><img src="formula_output.svg" /></td><td>ヒープの要素を出力します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">ダウンヒープを行います。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入力・初期化</b><br/><img src="scene_0.svg" alt="ビルドヒープ | 入力・初期化" title="ビルドヒープ | 入力・初期化"/></p></div><div><p><b class="scene_desc">最大ヒープの構築</b><br/><img src="scene_1.svg" alt="ビルドヒープ | 最大ヒープの構築" title="ビルドヒープ | 最大ヒープの構築"/></p></div><div><p><b class="scene_desc">出力</b><br/><img src="scene_2.svg" alt="ビルドヒープ | 出力" title="ビルドヒープ | 出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/linear.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/downheap_simulation.svg" width="60"/><img src="../../icons/algorithms/insertion.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
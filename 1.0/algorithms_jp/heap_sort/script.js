window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "整数列の整列";
document.getElementById('ptitle_en').innerHTML = "Sorting Integers";
document.getElementById('input_comment').innerHTML = "整数の列$a_0, a_1, ..., a_{N-1}$ <ul><li>$N &le; 100,000$</li><li>$a_i &le; 1,000,000,000$</li></ul>";
document.getElementById('output_comment').innerHTML = "整列された整数の列";
document.getElementById('motivation').innerHTML = "";
document.getElementById('description').innerHTML = "整数の列を小さい順に並び替えてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/sort/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/sort/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/heap_sort.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "ヒープソート";
document.getElementById('atitle_en').innerHTML = "Heap Sort";
document.getElementById('abstract').innerHTML = "ヒープソートは、その名の通りヒープ構造を用いて高速に整列を行うアルゴリズムです。";
document.getElementById('explanation').innerHTML = "前処理として、与えられたデータを基にヒープを構築します。ヒープの根には、常にその時点で優先度が最も高いもの（値が大きいもの）が格納されているため、根から順に要素を取り出し、後ろから大きい順に並べることができます。ヒープソートでは、根の値とヒープの末尾の値をスワップし、ヒープのサイズheapSizeを減らすことで、ヒープの区間とソート済みの区間を区別します。heapSizeは未ソート部分の要素数でもあり、ダウンヒープを行う範囲を制御します。";
document.getElementById('note').innerHTML = "ヒープソートはダウンヒープをN回行うので、オーダーはO(N log N)となります。ヒープソートは、１つの配列で完結するインプレイスソートであるという特長を持ちますが、離れた要素をスワップするため安定なソートではありません。";
document.getElementById('application').innerHTML = "";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/ACBT.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_Heap_Space.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">おおよそ完全二分木</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>数列の列</td><td class="code">A</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入力</th></tr><tr><td class="symbol"><img src="formula_input.svg" /></td><td>整数の列を入力します。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">ヒープ構築</th></tr><tr><td class="symbol"><img src="formula_downRotation.svg" /></td><td>部分木に対してダウンヒープを行います。</td><td class="code">downHeap(A, i)</td></tr><tr><th class="scene_desc" colspan="3">スワップとダウンヒープ</th></tr><tr><td class="symbol"><img src="formula_downRotation.svg" /></td><td>根からダウンヒープを行います。</td><td class="code">downHeap(A, 0)</td></tr><tr><td class="symbol"><img src="formula_exchange.svg" /></td><td>根とヒープの末尾の値をスワップします。</td><td class="code">swap(A[0], A[heapSize-1])</td></tr><tr><td class="symbol"><img src="formula_heap.svg" /></td><td>ヒープ条件を満たす未ソートの部分が減っていきます。</td><td class="code">区間[0, heapSize)</td></tr><tr><th class="scene_desc" colspan="3">出力</th></tr><tr><td class="symbol"><img src="formula_output.svg" /></td><td>整列された整数の列を出力します。。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_swap.svg" /><p class="caption">最大値であるヒープの根と末尾の要素をスワップします。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_downheap.svg" /><p class="caption">根からダウンヒープを行います。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入力</b><br/><img src="scene_0.svg" alt="ヒープソート | 入力" title="ヒープソート | 入力"/></p></div><div><p><b class="scene_desc">ヒープ構築</b><br/><img src="scene_1.svg" alt="ヒープソート | ヒープ構築" title="ヒープソート | ヒープ構築"/></p></div><div><p><b class="scene_desc">スワップとダウンヒープ</b><br/><img src="scene_2.svg" alt="ヒープソート | スワップとダウンヒープ" title="ヒープソート | スワップとダウンヒープ"/></p></div><div><p><b class="scene_desc">出力</b><br/><img src="scene_3.svg" alt="ヒープソート | 出力" title="ヒープソート | 出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/linear_log.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/heap_construction.svg" width="60"/><img src="../../icons/algorithms/downheap_simulation.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
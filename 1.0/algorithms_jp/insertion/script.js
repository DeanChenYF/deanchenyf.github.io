window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; ";
document.getElementById('ptitle').innerHTML = "整列済みの列への要素の追加";
document.getElementById('ptitle_en').innerHTML = "Add an Element to Sorted Sequence";
document.getElementById('input_comment').innerHTML = "最後の要素以外は昇順に整列みの整数の列<ul><li>要素の数N &le; 100</li></ul>";
document.getElementById('output_comment').innerHTML = "整列済みの整数の列";
document.getElementById('motivation').innerHTML = "すでに解決された部分問題の解を有効活用すれば、全体の問題を効率よく解くことができます。すでに整列された部分列に、１つの要素を追加してみましょう。";
document.getElementById('description').innerHTML = "昇順に整列された整数の列に、昇順を保つように１つの整数を追加してください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/insertion/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/insertion/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/insertion.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "挿入";
document.getElementById('atitle_en').innerHTML = "Insertion";
document.getElementById('abstract').innerHTML = "挿入する値を保持しておく一時変数tを用意し、末尾から前方に向かってtの値を挿入する位置を探します。";
document.getElementById('explanation').innerHTML = "配列要素の順列の変換では、配列以外の空間を準備し、計算や実装を工夫することができます。挿入操作では、指定された最後尾の値を一時変数tに記録しておき、整列済みの部分でtの値が挿入できる位置を後方から先頭に向かって探します。この過程で、tの値より大きい要素をひとつ後方へずらしていきます（コピーします）。tの値以下の要素が見つかったとき、そのひとつ後方の空き領域にtの値を戻し、処理を終了します。挿入する値が最小値だった場合は、全ての要素を後方にずらした後に、先頭に挿入されます。";
document.getElementById('note').innerHTML = "挿入操作では、挿入したい値よりも大きい要素は、後方へ移動する必要があります。最悪の場合は、挿入したい値がどの要素よりも小さい場合で、このとき全ての要素をひとつずつ移動する必要があります。よって挿入操作のオーダーはO(N)になります。<br/></br>配列Aの最後尾の要素iを指定した挿入操作を関数insertion(A, i)として定義します。";
document.getElementById('application').innerHTML = "insertionは、初等的整列アルゴリズムである挿入ソートの基本操作になります。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A1D.svg" /><br/><br/><img src="../../icons/structures/A0D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">一次元配列とシングルノード</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>整数の列</td><td class="code">A</td></tr><tr><td class="symbol"><img src="variable_t.svg" /></td><td>一時的に保存された挿入する値</td><td class="code">t</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入力</th></tr><tr><td class="symbol"><img src="formula_in.svg" /></td><td>整数の列を入力します。</td><td class="code"></td></tr><tr><td class="symbol"><img src="formula_b.svg" /></td><td>挿入する値を一時的に退避します。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">挿入</th></tr><tr><td class="symbol"><img src="formula_select.svg" /></td><td>現在の値と挿入する値を比べます。</td><td class="code">if A[j] > t:</td></tr><tr><td class="symbol"><img src="formula_cp.svg" /></td><td>挿入する値より大きく、後方へ移動する要素を指します。</td><td class="code">j</td></tr><tr><td class="symbol"><img src="formula_jp.svg" /></td><td>前方の値で上書きします。</td><td class="code">A[j+1] &larr; A[j]</td></tr><tr><td class="symbol"><img src="formula_sorted.svg" /></td><td>整列済みの範囲を拡張していきます。</td><td class="code">区間[j+1, N)</td></tr><tr><th class="scene_desc" colspan="3">出力</th></tr><tr><td class="symbol"><img src="formula_out.svg" /></td><td>数列を出力します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">挿入できるか比較します。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">後方へ移動します。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step3.svg" /><p class="caption">挿入する要素を列に戻します。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入力</b><br/><img src="scene_0.svg" alt="挿入 | 入力" title="挿入 | 入力"/></p></div><div><p><b class="scene_desc">挿入</b><br/><img src="scene_1.svg" alt="挿入 | 挿入" title="挿入 | 挿入"/></p></div><div><p><b class="scene_desc">出力</b><br/><img src="scene_2.svg" alt="挿入 | 出力" title="挿入 | 出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/linear.svg" />';
document.getElementById('prerequisites').innerHTML = '';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
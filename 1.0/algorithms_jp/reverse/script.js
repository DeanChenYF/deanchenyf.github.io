window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; ";
document.getElementById('ptitle').innerHTML = "区間の反転";
document.getElementById('ptitle_en').innerHTML = "Reverse of Segment";
document.getElementById('input_comment').innerHTML = "整数の列<ul><li>要素の数N &le; 1,000</li></ul>";
document.getElementById('output_comment').innerHTML = "要素が逆順になった整数の列";
document.getElementById('motivation').innerHTML = "配列、または指定された範囲の要素を逆順にするリバースは、列の区間に対する要素の順番を入れ替える最も基本的な操作です。";
document.getElementById('description').innerHTML = "整数の列の要素を逆順に並び替えてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/reverse/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/reverse/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/reverse.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "リバース";
document.getElementById('atitle_en').innerHTML = "Reverse";
document.getElementById('abstract').innerHTML = "リバース処理は、スワップ関数を応用することで、入力データを格納する配列１つで実現することができます。";
document.getElementById('explanation').innerHTML = "配列の中央を軸として対象となる２つの要素をスワップしていくことで、配列の要素を逆順に並べ変えます。対象となる２つの要素の添え字をそれぞれiとjとすると、i = 0, 1, 2, ..., N/2 - 1, iのペアとなるjは、iを使って N-(i+1) = N-i-1と求まります。";
document.getElementById('note').innerHTML = "スワップの回数は、配列のサイズの半分であるN/2回になります。よってリバースのオーダーはO(N)です。リバース処理は、reverse(A, l, r)のように区間[l, r)を反転する関数として汎用化することができます。";
document.getElementById('application').innerHTML = "昇順に整列されている列を降順に、降順に整列されている列を昇順に変換したい場合にも、リバースを使うことができます。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A1D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">一次元配列</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>整数の列</td><td class="code">A</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入力</th></tr><tr><td class="symbol"><img src="formula_in.svg" /></td><td>整数の列を読み込みます。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">リバース</th></tr><tr><td class="symbol"><img src="formula_p.svg" /></td><td>２つの要素を交換します。</td><td class="code">swap(A[i], A[j])</td></tr><tr><td class="symbol"><img src="formula_passedF.svg" /></td><td>再配置済みの要素を拡張していきます。</td><td class="code">区間[0, i]と区間[j, N)</td></tr><tr><th class="scene_desc" colspan="3">出力</th></tr><tr><td class="symbol"><img src="formula_out.svg" /></td><td>整数の列を出力します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">対応する２つの要素をスワップします。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入力</b><br/><img src="scene_0.svg" alt="リバース | 入力" title="リバース | 入力"/></p></div><div><p><b class="scene_desc">リバース</b><br/><img src="scene_1.svg" alt="リバース | リバース" title="リバース | リバース"/></p></div><div><p><b class="scene_desc">出力</b><br/><img src="scene_2.svg" alt="リバース | 出力" title="リバース | 出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/linear.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/swap.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
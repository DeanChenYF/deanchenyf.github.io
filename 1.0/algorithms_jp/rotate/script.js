window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; ";
document.getElementById('ptitle').innerHTML = "部分木の変型";
document.getElementById('ptitle_en').innerHTML = "Transformation of Sub-tree";
document.getElementById('input_comment').innerHTML = "根が定められた部分木";
document.getElementById('output_comment').innerHTML = "二分探索木の条件を満たしつつ、変型した後の部分木";
document.getElementById('motivation').innerHTML = "二分探索木条件を満たしつつ、効率良く木の形状を変えることができれば、バランスのよい二分探索木を維持することができます。";
document.getElementById('description').innerHTML = "部分木を変型してください。ただし、変換前後で、中間順巡回で得られるノードの訪問順は変わらないものとします。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/rotation/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/rotation/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/rotate.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "回転";
document.getElementById('atitle_en').innerHTML = "Rotate";
document.getElementById('abstract').innerHTML = "部分木に対する回転は、二分探索木条件を満たしつつノードの親子関係を上の図のように変更する操作です。";
document.getElementById('explanation').innerHTML = "回転操作は木の形状を変型しますが、二分探索木条件は維持されます。これは、この部分木に対して中間順巡回を行って得られるキーの順序が変わらないということです。回転には右回転と左回転があります。右回転では、根の左の子が新しい根として持ち上がり、元の根は新しい根の右の子になります。新しい根の右の子だったノードは、元の根（新しい根の右の子）の左の子になります。左回転も同様に、根の右の子が新しい根として持ち上がり、元の根は新しい根の左の子になります。<br><br>回転操作は、疑似コードに示したようにポインタの繋ぎ変えで行います。繋ぎ変えが必要になるのは２つのノードだけですが、ポインタを繋ぐ順番が重要になります。";
document.getElementById('note').innerHTML = "回転操作は一定数のポインタを繋ぎ変えるだけなので、O(1)で実行することができます。";
document.getElementById('application').innerHTML = "回転操作は、バランスのよい探索木を実装するための基本操作として、いくつかの高等的なデータ構造に応用されています。例えば、バランスの良い二分探索木である赤黒木やトリープに応用されています。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/DBT.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">動的な二分木</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_key.svg" /></td><td>二分探索木のキー</td><td class="code">key</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">回転</th></tr><tr><td class="symbol"><img src="formula_write.svg" /></td><td>ポインタを繋ぎ変えます。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_right.svg" /><p class="caption">右回転を行います。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_left.svg" /><p class="caption">左回転を行います。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">回転</b><br/><img src="scene_0.svg" alt="回転 | 回転" title="回転 | 回転"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/const.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/bst_simulation.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
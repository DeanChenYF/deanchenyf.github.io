window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; &#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "区間和クエリ";
document.getElementById('ptitle_en').innerHTML = "Range Sum Query";
document.getElementById('input_comment').innerHTML = "列に対する単一要素の加算<ul><li>整数の数N &le; 100,000</li><li>質問の数Q &le; 100,000</li><li>-1,000 &le; x, $a_i$ &le; 1,000</li></ul>";
document.getElementById('output_comment').innerHTML = "区間に対する和クエリへの回答";
document.getElementById('motivation').innerHTML = "整数の列における区間に関する操作と問い合わせ（クエリ）には、様々な組み合わせがあり、応用問題も数多く存在します。ここでは、最も基本的な問題のひとつである区間和クエリに答える問題を解決します。";
document.getElementById('description').innerHTML = "整数の列$a_0, a_1, ..., a_{N-1}$に対して、以下の操作・質問に対応してください。<ul><li>$a_i$にxを加算する</li><li>区間[a, b)の和を報告する</li></ul>";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/rsq/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/rsq/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/rsq_simulation.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "セグメント木: RSQ";
document.getElementById('atitle_en').innerHTML = "Segment Tree: RSQ";
document.getElementById('abstract').innerHTML = "セグメント木に対して区間の和を保持する変数を割り当てます。";
document.getElementById('explanation').innerHTML = "１要素の加算・減算と区間和クエリ(RSQ: Range Sum Query)に答えるためには、各ノードにその区間における和sumを保持し、更新が行われた後も維持します。<br/>1要素の更新クエリでは、列の指定された要素に対応する葉を起点に、根に向かってsumを更新していきます。現在のノードkの左の子と右の子の値の和に更新します。<br/>区間和クエリでは、内部ノードの値を用いて（利用できればその子孫を調べることなく）指定された区間の値を高速に求めます。[l, r)と[a, b)が交わらない場合は、RSQの答えに影響しない値として0を返します。[l, r)が[a, b)に完全に含まれる場合は、その区間の和が確定できるので、値をそのまま返します。それ以外の場合は、左の子と右の子に対してそれぞれ再帰的に答えを求め、それらの和を返します。";
document.getElementById('note').innerHTML = "RMQのためのセグメント木と同様に、1要素に対する更新も区間和クエリも、オーダーはO(log N)となります。";
document.getElementById('application').innerHTML = "";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/CBT.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">完全二分木</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_sum.svg" /></td><td>区間の和</td><td class="code">sum</td></tr><tr><td class="symbol"><img src="variable_res.svg" /></td><td>指定区間の和として返される値（※表示用のため配列にする必要はありません）</td><td class="code">res</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">質問に対する処理</th></tr><tr><td class="symbol"><img src="formula_update.svg" /></td><td>区間和を更新します。</td><td class="code">sum[k] &larr; ?</td></tr><tr><td class="symbol"><img src="formula_query.svg" /></td><td>指定区間の和を決定します。</td><td class="code">res &larr; ?</td></tr><tr><td class="symbol"><img src="formula_updated.svg" /></td><td>更新クエリにより更新済みの区間</td><td class="code">kの軌跡</td></tr><tr><td class="symbol"><img src="formula_outside.svg" /></td><td>探索区間とクエリ区間がが交わらない区間</td><td class="code">if r &le; a or b &le; l:</td></tr><tr><td class="symbol"><img src="formula_contain.svg" /></td><td>探索区間がクエリ区間に完全に含まれる区間</td><td class="code">else if a &le; l and r &le; b:</td></tr><tr><td class="symbol"><img src="formula_visited.svg" /></td><td>探索区間がクエリ区間とクエリ区間外を含む区間</td><td class="code">else:</td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">クエリ１：区間の和を更新します。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">クエリ２：指定区間の和を取得します。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">質問に対する処理</b><br/><img src="scene_0.svg" alt="セグメント木: RSQ | 質問に対する処理" title="セグメント木: RSQ | 質問に対する処理"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/log.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/btree_postorder.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
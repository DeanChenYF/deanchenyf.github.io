window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "整数列の整列";
document.getElementById('ptitle_en').innerHTML = "Sorting Integers";
document.getElementById('input_comment').innerHTML = "整数の列$a_0, a_1, ..., a_{N-1}$ <ul><li>$N &le; 100,000$</li><li>$a_i &le; 1,000,000,000$</li></ul>";
document.getElementById('output_comment').innerHTML = "整列された整数の列";
document.getElementById('motivation').innerHTML = "";
document.getElementById('description').innerHTML = "整数の列を小さい順に並び替えてください。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/sort/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/sort/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/shell_sort.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "シェルソート";
document.getElementById('atitle_en').innerHTML = "Shell Sort";
document.getElementById('abstract').innerHTML = "シェルソートは、一定の間隔だけ離れた要素のみを対象とした挿入ソートを繰り返すことで、配列の要素を並べ替えます。";
document.getElementById('explanation').innerHTML = "シェルソートは、間隔interval ={$g_1, g_2, ...$}だけ離れた要素のみを対象とした挿入ソートinsertionSort(A, $g_i$)を、最初は大きい値からgを狭めながら繰り返します。gが決まると、間隔がgとなる要素の部分列はいくつかのグループに分かれますが、各挿入ソートのソート済み部分を拡張しながら、各グループを前方から部分的に整列していきます。<br/><br/>データの昇順を保障するために、最後にg=1、つまり純粋な挿入ソートを行う必要がありますが、この時点でデータはおおよそ整列されているため、ほとんどデータの移動は発生しないことが期待されます。";
document.getElementById('note').innerHTML = "シェルソートは、ほぼ整列されたデータに対しては高速に動作するという挿入ソートの特徴を活かした高速な整列アルゴリズムです。最悪の場合の計算量はO($N^2$)になりますが、間隔をうまく選ぶことで、平均でO($N^{1.25}$)のオーダーになることが知られています。";
document.getElementById('application').innerHTML = "";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A1D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">１次元配列</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">データ</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>整数の列</td><td class="code">A</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">入力</th></tr><tr><td class="symbol"><img src="formula_in.svg" /></td><td>整数の列を入力します。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">挿入ソート</th></tr><tr><td class="symbol"><img src="formula_insertion.svg" /></td><td>間隔を指定した挿入ソートを実行します。</td><td class="code">insertionSort(A, g)</td></tr><tr><th class="scene_desc" colspan="3">出力</th></tr><tr><td class="symbol"><img src="formula_out.svg" /></td><td>整列された整数の列を出力します。</td><td class="code"></td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">間隔g1で挿入ソートを行います。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">間隔g2で挿入ソートを行います。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step3.svg" /><p class="caption">間隔g3で挿入ソートを行います・・・</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">入力</b><br/><img src="scene_0.svg" alt="シェルソート | 入力" title="シェルソート | 入力"/></p></div><div><p><b class="scene_desc">挿入ソート</b><br/><img src="scene_1.svg" alt="シェルソート | 挿入ソート" title="シェルソート | 挿入ソート"/></p></div><div><p><b class="scene_desc">出力</b><br/><img src="scene_2.svg" alt="シェルソート | 出力" title="シェルソート | 出力"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/quad.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/insertion_sort.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
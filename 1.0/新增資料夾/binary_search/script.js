window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "搜尋已排序的序列";
document.getElementById('ptitle_en').innerHTML = "(Search from Sorted Sequence)";
document.getElementById('input_comment').innerHTML = "序列與目標值（藍色長條）<ul><li>序列元素為升冪排列（由小到大）</li><li>元素數 N&le;1,000,000</li></ul>";
document.getElementById('output_comment').innerHTML = "目標值的位置";
document.getElementById('motivation').innerHTML = "要透過電腦處理的資料，通常都會先進行組織與管理，就像字典中的單字會依照字母順序排列（字典順序，lexicographical order）一樣。這麼做的目的，就是為了讓資料的查找更加方便，因此只要善用這項特性，就能有效提升搜尋演算法的速度。";
document.getElementById('description').innerHTML = "在升冪（由小到大）排序的陣列中尋找指定值。若指定值不存在，請傳回不存在；若指定值存在，則傳回其位置。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/search_sorted/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/search_sorted/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/binary_search.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "二元搜尋法";
document.getElementById('atitle_en').innerHTML = "(Binary Search)";
document.getElementById('abstract').innerHTML = "利用陣列元素與目標值（key）的大小關係，一面進行搜尋，一面縮小搜尋的範圍。";
document.getElementById('explanation').innerHTML = "二元搜尋法是利用目前搜尋範圍的中間值與目標值的大小關係，將搜尋範圍縮減至原本的一半。過程中的搜尋範圍以區間 [left, right) 表示。首先以 (left + right) / 2 計算出搜尋範圍中間的位置 mid。除法的計算結果若不是整數，則無條件捨去小數部分。求出搜尋範圍的中間值後，若其值與目標值相同，表示目標值已經找到，會在傳回 mid 之後結束。若目標值大於搜尋範圍的中間值，則表示搜尋範圍可鎖定在後半段，搜尋會在 left 更新為 mid+1 之後繼續進行。若目標值小於搜尋範圍的中間值，則表示搜尋範圍可鎖定在前半段，搜尋會在 right 更新為 mid 之後繼續進行。";
document.getElementById('note').innerHTML = "二元搜尋法最差的情況是搜尋範圍必須不斷地折半，直到最後剩下 1 為止。這表示我們只要知道元素數 N 必須連續除以 2 幾次才會變成 1，就可以知道最差情況下的執行步驟。由此可知二元搜尋法的時間複雜度為 O(log N)。關於時間複雜度，這邊要補充說明的是，雖然搜尋範圍折半的次數應為 log 2  N，但使用 Big O 符號時，常數 2 可被忽略。時間複雜度為 O(log N) 的二元搜尋法效率相當高，即使元素數高達 1,000,000 個，也只需要 20 次左右的執行步驟便可完成搜尋（編註：log 2  1000000 約為 19.93）。這比線性搜尋法還要快上 50,000 倍（1,000,000/20)。";
document.getElementById('application').innerHTML = "此演算法為許多搜尋演算法的基礎。只要問題或演算法中需要處理的數列元素為單調遞增（monotonically increasing）即可適用。此外，二元搜尋法不但可用於單調遞增序列，也可以應用在單調遞增函數 f(x) 上 ※※ ，以求出 f(x)=0 的解，是一款通用性相當高的演算法。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/A1D.svg" /><br/><br/><img src="../../icons/structures/A0D.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_st.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">一維陣列與單節點</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">資料</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>要進行搜尋的序列。元素必須為升冪（由小到大）排序。</td><td class="code">A</td></tr><tr><td class="symbol"><img src="variable_key.svg" /></td><td>目標值</td><td class="code">key</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">輸入</th></tr><tr><td class="symbol"><img src="formula_in.svg" /></td><td>載入整數序列。</td><td class="code"></td></tr><tr><td class="symbol"><img src="formula_ink.svg" /></td><td>載入目標值。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">搜尋</th></tr><tr><td class="symbol"><img src="formula_comp.svg" /></td><td>比較搜尋範圍中間的值與鍵值（目標值）。</td><td class="code">if A[mid] = key:<br/>else if A[mid] < key:</td></tr><tr><td class="symbol"><img src="formula_left.svg" /></td><td>指向搜尋範圍的最前端。</td><td class="code">left</td></tr><tr><td class="symbol"><img src="formula_right.svg" /></td><td>指向搜尋範圍的最尾端。</td><td class="code">right</td></tr><tr><td class="symbol"><img src="formula_mid.svg" /></td><td>指向目標值的位置。</td><td class="code">mid</td></tr><tr><td class="symbol"><img src="formula_candidate.svg" /></td><td>縮小搜尋範圍。</td><td class="code">區間[left, right)</td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_search.svg" /><p class="caption">將目標值與搜尋範圍中間的值做比較，將搜尋範圍縮小至前半段或後半段。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">輸入</b><br/><img src="scene_0.svg" alt="二元搜尋法 | 輸入" title="二元搜尋法 | 輸入"/></p></div><div><p><b class="scene_desc">搜尋</b><br/><img src="scene_1.svg" alt="二元搜尋法 | 搜尋" title="二元搜尋法 | 搜尋"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/log.svg" />';
document.getElementById('prerequisites').innerHTML = '';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};
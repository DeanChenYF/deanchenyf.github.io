window.onload = function () {
document.getElementById('io_arrow').innerHTML = "&rarr;";
document.getElementById('level').innerHTML = "&#9733; &#9734; ";
document.getElementById('ptitle').innerHTML = "當最大堆積的節點因更新而「使值變小」，要如何調整堆積？";
document.getElementById('ptitle_en').innerHTML = "Decreasing Value of Heap Node";
document.getElementById('input_comment').innerHTML = "最將最大堆積的節點值變小<ul><li>堆積的節點數N &le; 100,000</li></ul>";
document.getElementById('output_comment').innerHTML = "調整後的最大堆積";
document.getElementById('motivation').innerHTML = "最大堆積（Max Heap）的節點值更新為較小值時，必須根據其子節點及其他子孫節點的值重新調整堆積，以符合最大堆積特性。";
document.getElementById('description').innerHTML = "變更最大堆積其中 1 個節點值（使其值變小），並依最大堆積的特性（所有父節點的值都大於子節點的值），重新調整堆積。";
document.getElementById('input_panel').innerHTML = '<img src="../../problems/heap_decrease/input.svg" width="340"/>';
document.getElementById('output_panel').innerHTML = '<img src="../../problems/heap_decrease/output.svg" width="340"/>';
document.getElementById('algorithm_icon').innerHTML = '<img src="../../icons/algorithms/downheap_simulation.svg" width="100"/>';
document.getElementById('atitle').innerHTML = "Down Heap";
document.getElementById('atitle_en').innerHTML = "Down Heap";
document.getElementById('abstract').innerHTML = "當最大堆積的節點因更新而「使值變小」時，必須將該節點往葉節點的方向移動，以確保堆積能夠繼續滿足最大堆積性質，此操作稱為 Down Heap。本節將以「互換」來移動元素。";
document.getElementById('explanation').innerHTML = "當最大堆積的節點值因更新而變成較小值時（例如從 20 變成 1），應以該節點為起點，反覆與子節點比較大小，並在子節點的值較大時進行互換。為了滿足最大堆積特性，在與子節點比較大小時，必須從左、右子節點中選出較大值者。本節的做法是先找出父節點與左、右子節點中最大值的節點，再判斷應該如何互換（或不互換）。元素互換之後，再將之前選中的子節點位置設為新的起點。此處理會在左、右子節點皆滿足最大堆積性質（父節點擁有最大值），或葉節點被設為起點時結束。";
document.getElementById('note').innerHTML = "本節的作法是先比較父節點與子節點的值大小，再以swap函式進行互換。另一種作法是先將變更值的節點暫存在臨時變數中，讓大於該節點的子孫節點往上升，再以insertion將暫存的節點插入適當位置。不論使用swap還是insertion，各節點的移動範圍都會被限縮在完整二元樹的高度內，因此 Down Heap 的時間複雜度為 O(log N)。";
document.getElementById('application').innerHTML = "Down Heap 處理是用來實作優先佇列的一個零件。此外，堆積排序法也會在實作中用到此處理。";
document.getElementById('structure').innerHTML = '<tr><td style="text-align:center;width:100"><img src="../../icons/structures/ACBT.svg" /><br/><br/></td><td class="frame">&nbsp;<img height="160" class="frame_svg" valign="middle" src="space_t.svg" />&nbsp;</td></tr><tr><td></td><td class="caption">此圖為最大堆積（所有父節點皆大於子節點）</td></tr>';
document.getElementById('variable').innerHTML = '<tr><th class="scene_desc" colspan="3">資料</th></tr><tr><td class="symbol"><img src="variable_A.svg" /></td><td>最大堆積的元素</td><td class="code">A</td></tr>';
document.getElementById('formula').innerHTML = '<tr><th class="scene_desc" colspan="3">輸入與初始化</th></tr><tr><td class="symbol"><img src="formula_input.svg" /></td><td>載入滿足最大堆積性質的整數序列。</td><td class="code"></td></tr><tr><th class="scene_desc" colspan="3">更新元素與 Down Heap</th></tr><tr><td class="symbol"><img src="formula_write.svg" /></td><td>更新元素。</td><td class="code">A[i] &larr; value</td></tr><tr><td class="symbol"><img src="formula_select.svg" /></td><td>找出父節點與左、右子節點中擁有最大值的節點。</td><td class="code">largest &larr; ?</td></tr><tr><td class="symbol"><img src="formula_cp.svg" /></td><td>指向最大值的節點。</td><td class="code">largest</td></tr><tr><td class="symbol"><img src="formula_pair.svg" /></td><td>將父、子節點的 值互換。</td><td class="code">swap(A[i], A[largest])</td></tr><tr><td class="symbol"><img src="formula_trace.svg" /></td><td>將更新後的節點往葉節點方向移動。</td><td class="code">i 的軌跡</td></tr>';
document.getElementById('scheme').innerHTML = '<tr><td style="text-align:center;width:100"><img src="anim_qr.svg" width="80"/></td><td class="frame"><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step1.svg" /><p class="caption">比較父、子節點的大小關係，找出擁有最大值的節點。</p><hr class="separator"/><img height="160" class="frame_svg" src="scheme_step2.svg" /><p class="caption">若較大的子節點比父節點還大，則進行互換。</p></td></tr>';
document.getElementById('scene').innerHTML = '<div><p><b class="scene_desc">輸入與初始化</b><br/><img src="scene_0.svg" alt="Down Heap| 輸入與初始化" title="Down Heap| 輸入與初始化"/></p></div><div><p><b class="scene_desc">更新元素與 Down Heap</b><br/><img src="scene_1.svg" alt="Down Heap | 更新元素與 Down Heap" title="Down Heap | 更新元素與 Down Heap"/></p></div>';
document.getElementById('complexity').innerHTML = '<img src="../../../icons/complexity/log.svg" />';
document.getElementById('prerequisites').innerHTML = '<img src="../../icons/algorithms/swap.svg" width="60"/>';
MathJax.Hub.Queue(["Typeset",MathJax.Hub]);};